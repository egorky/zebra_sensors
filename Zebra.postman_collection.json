{
	"info": {
		"_postman_id": "64b425c0-d498-4f70-beb2-fbec801953f9",
		"name": "Zebra",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10279538"
	},
	"item": [
		{
			"name": "environmental",
			"item": [
				{
					"name": "tasks",
					"item": [
						{
							"name": "{taskId}",
							"item": [
								{
									"name": "stop",
									"item": [
										{
											"name": "Stops a Task",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "apikey",
														"value": "{{apikey}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/environmental/tasks/:taskId/stop",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"environmental",
														"tasks",
														":taskId",
														"stop"
													],
													"variable": [
														{
															"key": "taskId",
															"value": "f0ab719f-e3f0-44f4-8b12-5d7aa36ddbd5",
															"description": "(Required) Required. ID of the Electronic Temperature Sensor Task you wish to stop. <br>Example:  '04a21952-cdcf-4bb2-bcaa-4e325f4b9a4a'."
														}
													]
												},
												"description": "Stops the task specified by the taskId provided"
											},
											"response": [
												{
													"name": "A successful response",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/environmental/tasks/:taskId/stop",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"environmental",
																"tasks",
																":taskId",
																"stop"
															],
															"variable": [
																{
																	"key": "taskId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"task\": {\n    \"id\": \"<string>\",\n    \"sensor_count\": \"<string>\",\n    \"status\": \"TASK_STATUS_ACTIVE\",\n    \"sensor_task_status_overview\": {\n      \"active\": \"<integer>\",\n      \"active_with_alarm\": \"<integer>\",\n      \"completed\": \"<integer>\",\n      \"start_pending\": \"<integer>\",\n      \"stop_pending\": \"<integer>\"\n    },\n    \"started\": \"<dateTime>\",\n    \"ended\": \"<dateTime>\",\n    \"taskDetails\": {\n      \"name\": \"<string>\",\n      \"created\": \"<dateTime>\",\n      \"updated\": \"<dateTime>\",\n      \"interval_minutes\": \"<long>\",\n      \"interval_seconds\": \"<long>\",\n      \"loop_reads\": \"<boolean>\",\n      \"start_immediately\": {},\n      \"start_delayed\": {\n        \"on_button_press\": false,\n        \"delayed_temp_below\": \"<float>\",\n        \"delayed_temp_above\": \"<float>\",\n        \"delayed_minutes\": \"<long>\",\n        \"delayed_until\": \"<dateTime>\"\n      },\n      \"sensor_type\": \"SENSOR_TYPE_TEMPERATURE\",\n      \"alarm_low_temp\": \"<float>\",\n      \"alarm_high_temp\": \"<float>\",\n      \"notes\": \"<string>\",\n      \"low_duration_minutes\": \"<long>\",\n      \"low_duration_seconds\": \"<long>\",\n      \"high_duration_minutes\": \"<long>\",\n      \"high_duration_seconds\": \"<long>\",\n      \"required_sensors\": \"<string>\"\n    },\n    \"alarm_count\": \"<string>\"\n  }\n}"
												},
												{
													"name": "An unexpected error response",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/environmental/tasks/:taskId/stop",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"environmental",
																"tasks",
																":taskId",
																"stop"
															],
															"variable": [
																{
																	"key": "taskId"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"code\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"details\": [\n    {\n      \"@type\": \"<string>\"\n    },\n    {\n      \"@type\": \"<string>\"\n    }\n  ]\n}"
												},
												{
													"name": "Authentication information is missing or invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/environmental/tasks/:taskId/stop",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"environmental",
																"tasks",
																":taskId",
																"stop"
															],
															"variable": [
																{
																	"key": "taskId"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								},
								{
									"name": "alarms",
									"item": [
										{
											"name": "Retrieves alarms for a Task",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "apikey",
														"value": "{{apikey}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/environmental/tasks/:taskId/alarms?sort_order=SORT_ORDER_DESC&page.size=10",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"environmental",
														"tasks",
														":taskId",
														"alarms"
													],
													"query": [
														{
															"key": "page.page",
															"value": "<long>",
															"description": "Optional. Page number, starting from 0.",
															"disabled": true
														},
														{
															"key": "sort_order",
															"value": "SORT_ORDER_DESC",
															"description": "Optional. Used to specify the order direction (ascending or descending). The response is sorted by the date and time the alarm occurred."
														},
														{
															"key": "id",
															"value": "<string>",
															"description": "Optional. ID of the Sensor. Example: 952482b0-1291-4d22-90eb-f4ae9b462d08",
															"disabled": true
														},
														{
															"key": "mac_address",
															"value": "<string>",
															"description": "Optional. MAC address of the Sensor. Example: 00074DDDA760",
															"disabled": true
														},
														{
															"key": "serial_number",
															"value": "<string>",
															"description": "Optional. Serial number of the Sensor. Example: DLJ222801069",
															"disabled": true
														},
														{
															"key": "page.size",
															"value": "10"
														}
													],
													"variable": [
														{
															"key": "taskId",
															"value": "9f09e0f4-2a97-48b3-bb2b-0572928ff1a7",
															"description": "(Required) Required. ID of the Task. <br>Example:  '04a21952-cdcf-4bb2-bcaa-4e325f4b9a4a'."
														}
													]
												},
												"description": "Retrieves alarms and associated data for a single Task"
											},
											"response": [
												{
													"name": "A successful response.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/environmental/tasks/:taskId/alarms?page.page=<long>&page.size=<long>&sort_order=SORT_ORDER_ASC&id=<string>&mac_address=<string>&serial_number=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"environmental",
																"tasks",
																":taskId",
																"alarms"
															],
															"query": [
																{
																	"key": "page.page",
																	"value": "<long>",
																	"description": "Optional. Page number, starting from 0."
																},
																{
																	"key": "page.size",
																	"value": "<long>",
																	"description": "(Required) Required. Number of elements per page. Greater than 0."
																},
																{
																	"key": "sort_order",
																	"value": "SORT_ORDER_ASC",
																	"description": "Optional. Used to specify the order direction (ascending or descending). The response is sorted by the date and time the alarm occurred."
																},
																{
																	"key": "id",
																	"value": "<string>",
																	"description": "Optional. ID of the Sensor. Example: 952482b0-1291-4d22-90eb-f4ae9b462d08"
																},
																{
																	"key": "mac_address",
																	"value": "<string>",
																	"description": "Optional. MAC address of the Sensor. Example: 00074DDDA760"
																},
																{
																	"key": "serial_number",
																	"value": "<string>",
																	"description": "Optional. Serial number of the Sensor. Example: DLJ222801069"
																}
															],
															"variable": [
																{
																	"key": "taskId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"page_response\": {\n    \"total_elements\": \"<string>\",\n    \"size\": \"<long>\",\n    \"total_pages\": \"<long>\",\n    \"page\": \"<long>\"\n  },\n  \"sensors_alarms\": [\n    {\n      \"sensor_id\": \"<string>\",\n      \"alarm_type\": \"ALARM_TYPE_HIGH_LIMIT_ALARM\",\n      \"occurred\": \"<dateTime>\",\n      \"temperature\": \"<float>\",\n      \"sensor_name\": \"<string>\"\n    },\n    {\n      \"sensor_id\": \"<string>\",\n      \"alarm_type\": \"ALARM_TYPE_LOW_LIMIT_ALARM\",\n      \"occurred\": \"<dateTime>\",\n      \"temperature\": \"<float>\",\n      \"sensor_name\": \"<string>\"\n    }\n  ]\n}"
												},
												{
													"name": "An unexpected error response",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/environmental/tasks/:taskId/alarms?page.page=<long>&page.size=<long>&sort_order=SORT_ORDER_ASC&id=<string>&mac_address=<string>&serial_number=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"environmental",
																"tasks",
																":taskId",
																"alarms"
															],
															"query": [
																{
																	"key": "page.page",
																	"value": "<long>",
																	"description": "Optional. Page number, starting from 0."
																},
																{
																	"key": "page.size",
																	"value": "<long>",
																	"description": "(Required) Required. Number of elements per page. Greater than 0."
																},
																{
																	"key": "sort_order",
																	"value": "SORT_ORDER_ASC",
																	"description": "Optional. Used to specify the order direction (ascending or descending). The response is sorted by the date and time the alarm occurred."
																},
																{
																	"key": "id",
																	"value": "<string>",
																	"description": "Optional. ID of the Sensor. Example: 952482b0-1291-4d22-90eb-f4ae9b462d08"
																},
																{
																	"key": "mac_address",
																	"value": "<string>",
																	"description": "Optional. MAC address of the Sensor. Example: 00074DDDA760"
																},
																{
																	"key": "serial_number",
																	"value": "<string>",
																	"description": "Optional. Serial number of the Sensor. Example: DLJ222801069"
																}
															],
															"variable": [
																{
																	"key": "taskId"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"code\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"details\": [\n    {\n      \"@type\": \"<string>\"\n    },\n    {\n      \"@type\": \"<string>\"\n    }\n  ]\n}"
												},
												{
													"name": "Authentication information is missing or invalid.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/environmental/tasks/:taskId/alarms?page.page=<long>&page.size=<long>&sort_order=SORT_ORDER_ASC&id=<string>&mac_address=<string>&serial_number=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"environmental",
																"tasks",
																":taskId",
																"alarms"
															],
															"query": [
																{
																	"key": "page.page",
																	"value": "<long>",
																	"description": "Optional. Page number, starting from 0."
																},
																{
																	"key": "page.size",
																	"value": "<long>",
																	"description": "(Required) Required. Number of elements per page. Greater than 0."
																},
																{
																	"key": "sort_order",
																	"value": "SORT_ORDER_ASC",
																	"description": "Optional. Used to specify the order direction (ascending or descending). The response is sorted by the date and time the alarm occurred."
																},
																{
																	"key": "id",
																	"value": "<string>",
																	"description": "Optional. ID of the Sensor. Example: 952482b0-1291-4d22-90eb-f4ae9b462d08"
																},
																{
																	"key": "mac_address",
																	"value": "<string>",
																	"description": "Optional. MAC address of the Sensor. Example: 00074DDDA760"
																},
																{
																	"key": "serial_number",
																	"value": "<string>",
																	"description": "Optional. Serial number of the Sensor. Example: DLJ222801069"
																}
															],
															"variable": [
																{
																	"key": "taskId"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "Retrieves alarms for a Task",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "apikey",
																"value": "{{apikey}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/environmental/tasks/:taskId/alarms?sort_order=SORT_ORDER_DESC&page.size=10",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"environmental",
																"tasks",
																":taskId",
																"alarms"
															],
															"query": [
																{
																	"key": "page.page",
																	"value": "<long>",
																	"description": "Optional. Page number, starting from 0.",
																	"disabled": true
																},
																{
																	"key": "sort_order",
																	"value": "SORT_ORDER_DESC",
																	"description": "Optional. Used to specify the order direction (ascending or descending). The response is sorted by the date and time the alarm occurred."
																},
																{
																	"key": "id",
																	"value": "<string>",
																	"description": "Optional. ID of the Sensor. Example: 952482b0-1291-4d22-90eb-f4ae9b462d08",
																	"disabled": true
																},
																{
																	"key": "mac_address",
																	"value": "<string>",
																	"description": "Optional. MAC address of the Sensor. Example: 00074DDDA760",
																	"disabled": true
																},
																{
																	"key": "serial_number",
																	"value": "<string>",
																	"description": "Optional. Serial number of the Sensor. Example: DLJ222801069",
																	"disabled": true
																},
																{
																	"key": "page.size",
																	"value": "10"
																}
															],
															"variable": [
																{
																	"key": "taskId",
																	"value": "9f09e0f4-2a97-48b3-bb2b-0572928ff1a7",
																	"description": "(Required) Required. ID of the Task. <br>Example:  '04a21952-cdcf-4bb2-bcaa-4e325f4b9a4a'."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Date",
															"value": "Wed, 25 Sep 2024 13:09:11 GMT"
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														},
														{
															"key": "Content-Length",
															"value": "1014"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "grpc-metadata-content-type",
															"value": "application/grpc"
														},
														{
															"key": "grpc-metadata-grpc-accept-encoding",
															"value": "gzip"
														},
														{
															"key": "grpc-metadata-x-zebra-envirovue-workspace",
															"value": "11083e96-8728-49c9-81c9-291570d9c8f7"
														},
														{
															"key": "request-id",
															"value": "crq0mtvu9nis73b05pe0"
														},
														{
															"key": "x-envoy-upstream-service-time",
															"value": "32"
														},
														{
															"key": "Server",
															"value": "envoy"
														},
														{
															"key": "strict-transport-security",
															"value": "max-age=15768000"
														},
														{
															"key": "Access-Control-Allow-Origin",
															"value": "*"
														},
														{
															"key": "Access-Control-Allow-Headers",
															"value": "Origin, X-Requested-With, Accept, apikey, Content-Type, Cache-Control"
														},
														{
															"key": "Access-Control-Max-Age",
															"value": "3628800"
														},
														{
															"key": "Access-Control-Allow-Methods",
															"value": "GET, PATCH, POST, DELETE"
														}
													],
													"cookie": [],
													"body": "{\n    \"page_response\": {\n        \"total_elements\": 5,\n        \"size\": 10,\n        \"total_pages\": 1,\n        \"page\": 0\n    },\n    \"sensors_alarms\": [\n        {\n            \"sensor_id\": \"cce4d193-e402-42c5-b9a1-31b3272dc3eb\",\n            \"alarm_type\": \"ALARM_TYPE_HIGH_LIMIT_ALARM\",\n            \"occurred\": \"2024-09-25T08:10:01Z\",\n            \"temperature\": 21.89,\n            \"sensor_name\": \"ZS300_DLJ230203866\"\n        },\n        {\n            \"sensor_id\": \"cce4d193-e402-42c5-b9a1-31b3272dc3eb\",\n            \"alarm_type\": \"ALARM_TYPE_LOW_LIMIT_ALARM\",\n            \"occurred\": \"2024-09-25T04:05:46Z\",\n            \"temperature\": 11.17,\n            \"sensor_name\": \"ZS300_DLJ230203866\"\n        },\n        {\n            \"sensor_id\": \"cce4d193-e402-42c5-b9a1-31b3272dc3eb\",\n            \"alarm_type\": \"ALARM_TYPE_HIGH_LIMIT_ALARM\",\n            \"occurred\": \"2024-09-25T03:27:46Z\",\n            \"temperature\": 29.13,\n            \"sensor_name\": \"ZS300_DLJ230203866\"\n        },\n        {\n            \"sensor_id\": \"cce4d193-e402-42c5-b9a1-31b3272dc3eb\",\n            \"alarm_type\": \"ALARM_TYPE_LOW_LIMIT_ALARM\",\n            \"occurred\": \"2024-09-25T02:18:31Z\",\n            \"temperature\": 5.36,\n            \"sensor_name\": \"ZS300_DLJ230203866\"\n        },\n        {\n            \"sensor_id\": \"cce4d193-e402-42c5-b9a1-31b3272dc3eb\",\n            \"alarm_type\": \"ALARM_TYPE_HIGH_LIMIT_ALARM\",\n            \"occurred\": \"2024-09-25T01:40:01Z\",\n            \"temperature\": 27.58,\n            \"sensor_name\": \"ZS300_DLJ230203866\"\n        }\n    ]\n}"
												}
											]
										}
									]
								},
								{
									"name": "assets",
									"item": [
										{
											"name": "Adds an asset to a Task",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"asset\": \"<string>\",\n  \"id_format\": \"ASSET_ID_FORMAT_GS1_URI,\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/environmental/tasks/:taskId/assets",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"environmental",
														"tasks",
														":taskId",
														"assets"
													],
													"variable": [
														{
															"key": "taskId",
															"value": "<string>",
															"description": "(Required) ID of the task to which you want to add an asset"
														}
													]
												},
												"description": "Adds an asset to an Electronic Temperature Sensor task based on the taskId provided in the path and the asset provided in the request body."
											},
											"response": [
												{
													"name": "A successful response.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"asset\": \"<string>\",\n  \"id_format\": \"ASSET_ID_FORMAT_GS1_URI,\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/environmental/tasks/:taskId/assets",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"environmental",
																"tasks",
																":taskId",
																"assets"
															],
															"variable": [
																{
																	"key": "taskId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"asset_id\": \"<string>\",\n  \"task_asset_id\": \"<string>\"\n}"
												},
												{
													"name": "An unexpected error response.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"asset\": \"<string>\",\n  \"id_format\": \"ASSET_ID_FORMAT_GS1_URI,\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/environmental/tasks/:taskId/assets",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"environmental",
																"tasks",
																":taskId",
																"assets"
															],
															"variable": [
																{
																	"key": "taskId"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"code\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"details\": [\n    {\n      \"@type\": \"<string>\"\n    },\n    {\n      \"@type\": \"<string>\"\n    }\n  ]\n}"
												},
												{
													"name": "Authentication information is missing or invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"asset\": \"<string>\",\n  \"id_format\": \"ASSET_ID_FORMAT_GS1_URI,\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/environmental/tasks/:taskId/assets",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"environmental",
																"tasks",
																":taskId",
																"assets"
															],
															"variable": [
																{
																	"key": "taskId"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												}
											]
										}
									]
								},
								{
									"name": "sensors",
									"item": [
										{
											"name": "Associates sensors with a Task",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "apikey",
														"value": "{{apikey}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"sensor_ids\": [\n    \"cce4d193-e402-42c5-b9a1-31b3272dc3eb\"\n  ]\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/environmental/tasks/:taskId/sensors",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"environmental",
														"tasks",
														":taskId",
														"sensors"
													],
													"variable": [
														{
															"key": "taskId",
															"value": "9f09e0f4-2a97-48b3-bb2b-0572928ff1a7",
															"description": "(Required) The ID (uuid) of the task to which you want to associate sensor(s)"
														}
													]
												},
												"description": "Associates sensor(s) to the task specified with a taskId"
											},
											"response": [
												{
													"name": "A successful response. One or more sensors were successfully associated with the task.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"sensor_ids\": [\n    \"<uuid>\",\n    \"<uuid>\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/environmental/tasks/:taskId/sensors",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"environmental",
																"tasks",
																":taskId",
																"sensors"
															],
															"variable": [
																{
																	"key": "taskId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"associated_sensors\": [\n    {\n      \"sensor_id\": \"<string>\",\n      \"sensor_task_id\": \"<string>\"\n    },\n    {\n      \"sensor_id\": \"<string>\",\n      \"sensor_task_id\": \"<string>\"\n    }\n  ],\n  \"failed_sensors\": [\n    {\n      \"sensor_id\": \"<string>\",\n      \"failed_sensor_error\": \"FAILED_SENSOR_ERROR_SENSOR_ACTIVE\"\n    },\n    {\n      \"sensor_id\": \"<string>\",\n      \"failed_sensor_error\": \"FAILED_SENSOR_ERROR_PENDING_UNENROLLMENT\"\n    }\n  ]\n}"
												},
												{
													"name": "An error response",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"sensor_ids\": [\n    \"<uuid>\",\n    \"<uuid>\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/environmental/tasks/:taskId/sensors",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"environmental",
																"tasks",
																":taskId",
																"sensors"
															],
															"variable": [
																{
																	"key": "taskId"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "Authentication information is missing or invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"sensor_ids\": [\n    \"<uuid>\",\n    \"<uuid>\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/environmental/tasks/:taskId/sensors",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"environmental",
																"tasks",
																":taskId",
																"sensors"
															],
															"variable": [
																{
																	"key": "taskId"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "Resource not found.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "Authorization",
																"value": "Bearer <token>",
																"description": "Added as a part of security scheme: bearer"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"sensor_ids\": [\n    \"<uuid>\",\n    \"<uuid>\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/environmental/tasks/:taskId/sensors",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"environmental",
																"tasks",
																":taskId",
																"sensors"
															],
															"variable": [
																{
																	"key": "taskId"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "Asociación DLJ230203859",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"key": "apikey",
																"value": "{{apikey}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"sensor_ids\": [\n    \"563ac292-9574-48b7-b29b-1d94472a59e1\"\n  ]\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/environmental/tasks/:taskId/sensors",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"environmental",
																"tasks",
																":taskId",
																"sensors"
															],
															"variable": [
																{
																	"key": "taskId",
																	"value": "f0ab719f-e3f0-44f4-8b12-5d7aa36ddbd5",
																	"description": "(Required) The ID (uuid) of the task to which you want to associate sensor(s)"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Date",
															"value": "Fri, 20 Sep 2024 16:53:38 GMT"
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														},
														{
															"key": "Content-Length",
															"value": "153"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "grpc-metadata-content-type",
															"value": "application/grpc"
														},
														{
															"key": "grpc-metadata-grpc-accept-encoding",
															"value": "gzip"
														},
														{
															"key": "grpc-metadata-x-zebra-envirovue-workspace",
															"value": "11083e96-8728-49c9-81c9-291570d9c8f7"
														},
														{
															"key": "request-id",
															"value": "crmqh4nu9nis73aumu6g"
														},
														{
															"key": "x-envoy-upstream-service-time",
															"value": "36"
														},
														{
															"key": "Server",
															"value": "envoy"
														},
														{
															"key": "strict-transport-security",
															"value": "max-age=15768000"
														},
														{
															"key": "Access-Control-Allow-Origin",
															"value": "*"
														},
														{
															"key": "Access-Control-Allow-Headers",
															"value": "Origin, X-Requested-With, Accept, apikey, Content-Type, Cache-Control"
														},
														{
															"key": "Access-Control-Max-Age",
															"value": "3628800"
														},
														{
															"key": "Access-Control-Allow-Methods",
															"value": "GET, PATCH, POST, DELETE"
														}
													],
													"cookie": [],
													"body": "{\n    \"associated_sensors\": [\n        {\n            \"sensor_id\": \"563ac292-9574-48b7-b29b-1d94472a59e1\",\n            \"sensor_task_id\": \"a3958afb-2b09-4ead-a40d-242c8097af96\"\n        }\n    ],\n    \"failed_sensors\": []\n}"
												}
											]
										}
									]
								},
								{
									"name": "Retrieves data for a Task",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "apikey",
												"value": "{{apikey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/environmental/tasks/:taskId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"environmental",
												"tasks",
												":taskId"
											],
											"variable": [
												{
													"key": "taskId",
													"value": "9f09e0f4-2a97-48b3-bb2b-0572928ff1a7",
													"description": "(Required) Required. ID of the Task. <br>Example:  '04a21952-cdcf-4bb2-bcaa-4e325f4b9a4a'."
												}
											]
										},
										"description": "Retrieves data for a specific Task."
									},
									"response": [
										{
											"name": "A successful response.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/environmental/tasks/:taskId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"environmental",
														"tasks",
														":taskId"
													],
													"variable": [
														{
															"key": "taskId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"task\": {\n    \"id\": \"<string>\",\n    \"sensor_count\": \"<string>\",\n    \"status\": \"TASK_STATUS_ACTIVE\",\n    \"sensor_task_status_overview\": {\n      \"active\": \"<integer>\",\n      \"active_with_alarm\": \"<integer>\",\n      \"completed\": \"<integer>\",\n      \"start_pending\": \"<integer>\",\n      \"stop_pending\": \"<integer>\"\n    },\n    \"started\": \"<dateTime>\",\n    \"ended\": \"<dateTime>\",\n    \"taskDetails\": {\n      \"name\": \"<string>\",\n      \"created\": \"<dateTime>\",\n      \"updated\": \"<dateTime>\",\n      \"interval_minutes\": \"<long>\",\n      \"interval_seconds\": \"<long>\",\n      \"loop_reads\": \"<boolean>\",\n      \"start_immediately\": {},\n      \"start_delayed\": {\n        \"on_button_press\": false,\n        \"delayed_temp_below\": \"<float>\",\n        \"delayed_temp_above\": \"<float>\",\n        \"delayed_minutes\": \"<long>\",\n        \"delayed_until\": \"<dateTime>\"\n      },\n      \"sensor_type\": \"SENSOR_TYPE_TEMPERATURE\",\n      \"alarm_low_temp\": \"<float>\",\n      \"alarm_high_temp\": \"<float>\",\n      \"notes\": \"<string>\",\n      \"low_duration_minutes\": \"<long>\",\n      \"low_duration_seconds\": \"<long>\",\n      \"high_duration_minutes\": \"<long>\",\n      \"high_duration_seconds\": \"<long>\",\n      \"required_sensors\": \"<string>\"\n    },\n    \"alarm_count\": \"<string>\"\n  }\n}"
										},
										{
											"name": "An unexpected error response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/environmental/tasks/:taskId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"environmental",
														"tasks",
														":taskId"
													],
													"variable": [
														{
															"key": "taskId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"details\": [\n    {\n      \"@type\": \"<string>\"\n    },\n    {\n      \"@type\": \"<string>\"\n    }\n  ]\n}"
										},
										{
											"name": "Authentication information is missing or invalid.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/environmental/tasks/:taskId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"environmental",
														"tasks",
														":taskId"
													],
													"variable": [
														{
															"key": "taskId"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Resource not found.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/environmental/tasks/:taskId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"environmental",
														"tasks",
														":taskId"
													],
													"variable": [
														{
															"key": "taskId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								}
							]
						},
						{
							"name": "Creates a new Task",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "apikey",
										"value": "{{apikey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"task_from_details\": {\n    \"task_details\": {\n      \"name\": \"Tarea 24 septiembre 2024\",\n      \"interval_minutes\": \"0\",\n      \"interval_seconds\": \"15\",\n      \"loop_reads\": false,\n      \"start_immediately\": {},\n      \"sensor_type\": \"SENSOR_TYPE_TEMPERATURE\",\n      \"alarm_low_temp\": \"20\",\n      \"alarm_high_temp\": \"21\",\n      \"notes\": \"Tarea para probar DLJ230203866\",\n      \"low_duration_minutes\": \"0\",\n      \"low_duration_seconds\": \"59\",\n      \"high_duration_minutes\": \"0\",\n      \"high_duration_seconds\": \"59\",\n      \"required_sensors\": \"1\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/environmental/tasks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"environmental",
										"tasks"
									]
								},
								"description": "Creates a Task based on the settings of the sensor type, sampling interval, alarm thresholds, durations and other fields in the request body."
							},
							"response": [
								{
									"name": "A successful response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"task_from_details\": {\n    \"task_details\": {\n      \"name\": \"<string>\",\n      \"interval_minutes\": \"<long>\",\n      \"interval_seconds\": \"<long>\",\n      \"loop_reads\": false,\n      \"start_immediately\": {},\n      \"sensor_type\": \"SENSOR_TYPE_TEMPERATURE\",\n      \"alarm_low_temp\": \"<float>\",\n      \"alarm_high_temp\": \"<float>\",\n      \"notes\": \"<string>\",\n      \"low_duration_minutes\": \"<long>\",\n      \"low_duration_seconds\": \"<long>\",\n      \"high_duration_minutes\": \"<long>\",\n      \"high_duration_seconds\": \"<long>\",\n      \"required_sensors\": \"<long>\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/environmental/tasks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"environmental",
												"tasks"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\"\n}"
								},
								{
									"name": "An unexpected error response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"task_from_details\": {\n    \"task_details\": {\n      \"name\": \"<string>\",\n      \"interval_minutes\": \"<long>\",\n      \"interval_seconds\": \"<long>\",\n      \"loop_reads\": false,\n      \"start_immediately\": {},\n      \"sensor_type\": \"SENSOR_TYPE_TEMPERATURE\",\n      \"alarm_low_temp\": \"<float>\",\n      \"alarm_high_temp\": \"<float>\",\n      \"notes\": \"<string>\",\n      \"low_duration_minutes\": \"<long>\",\n      \"low_duration_seconds\": \"<long>\",\n      \"high_duration_minutes\": \"<long>\",\n      \"high_duration_seconds\": \"<long>\",\n      \"required_sensors\": \"<long>\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/environmental/tasks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"environmental",
												"tasks"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"details\": [\n    {\n      \"@type\": \"<string>\"\n    },\n    {\n      \"@type\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"name": "Authentication information is missing or invalid.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"task_from_details\": {\n    \"task_details\": {\n      \"name\": \"<string>\",\n      \"interval_minutes\": \"<long>\",\n      \"interval_seconds\": \"<long>\",\n      \"loop_reads\": false,\n      \"start_immediately\": {},\n      \"sensor_type\": \"SENSOR_TYPE_TEMPERATURE\",\n      \"alarm_low_temp\": \"<float>\",\n      \"alarm_high_temp\": \"<float>\",\n      \"notes\": \"<string>\",\n      \"low_duration_minutes\": \"<long>\",\n      \"low_duration_seconds\": \"<long>\",\n      \"high_duration_minutes\": \"<long>\",\n      \"high_duration_seconds\": \"<long>\",\n      \"required_sensors\": \"<long>\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/environmental/tasks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"environmental",
												"tasks"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Tarea Inicial",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "apikey",
												"value": "{{apikey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"task_from_details\": {\n    \"task_details\": {\n      \"name\": \"Tarea Inicial\",\n      \"interval_minutes\": \"0\",\n      \"interval_seconds\": \"15\",\n      \"loop_reads\": false,\n      \"start_immediately\": {},\n      \"sensor_type\": \"SENSOR_TYPE_TEMPERATURE\",\n      \"alarm_low_temp\": \"30\",\n      \"alarm_high_temp\": \"32\",\n      \"notes\": \"Tarea para probar este sensor\",\n      \"low_duration_minutes\": \"1\",\n      \"low_duration_seconds\": \"59\",\n      \"high_duration_minutes\": \"2\",\n      \"high_duration_seconds\": \"59\",\n      \"required_sensors\": \"1\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/environmental/tasks",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"environmental",
												"tasks"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 20 Sep 2024 16:50:27 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "45"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "grpc-metadata-content-type",
											"value": "application/grpc"
										},
										{
											"key": "grpc-metadata-grpc-accept-encoding",
											"value": "gzip"
										},
										{
											"key": "grpc-metadata-x-zebra-envirovue-workspace",
											"value": "11083e96-8728-49c9-81c9-291570d9c8f7"
										},
										{
											"key": "request-id",
											"value": "crmqfkqfbkrc73cr3350"
										},
										{
											"key": "x-envoy-upstream-service-time",
											"value": "380"
										},
										{
											"key": "Server",
											"value": "envoy"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=15768000"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Headers",
											"value": "Origin, X-Requested-With, Accept, apikey, Content-Type, Cache-Control"
										},
										{
											"key": "Access-Control-Max-Age",
											"value": "3628800"
										},
										{
											"key": "Access-Control-Allow-Methods",
											"value": "GET, PATCH, POST, DELETE"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": \"f0ab719f-e3f0-44f4-8b12-5d7aa36ddbd5\"\n}"
								}
							]
						},
						{
							"name": "Retrieves Tasks",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "apikey",
										"value": "{{apikey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/environmental/tasks?page=0&size=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"environmental",
										"tasks"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Page number, starting from 0."
										},
										{
											"key": "size",
											"value": "10",
											"description": "(Required) Number of elements per page. Greater than 0."
										},
										{
											"key": "text_filter",
											"value": "9f09e0f4-2a97-48b3-bb2b-0572928ff1a7",
											"description": "Used for searching for specific Tasks by name.",
											"disabled": true
										},
										{
											"key": "updated_from",
											"value": "<dateTime>",
											"description": "Required when the updated_to is set. Used in conjunction with the updated_to to filter the tasks by the last updated date, in the format of YYYY-MM-DDTHH:mm:ss.SSSSSSZ, e.g., 2022-10-28T05:41:43.620792Z. The updated_from cannot be later than the updated_to.",
											"disabled": true
										},
										{
											"key": "updated_to",
											"value": "<dateTime>",
											"description": "Required when the updated_from is set. Used in conjunction with the updated_from to filter the tasks by the last updated date, in the format of YYYY-MM-DDTHH:mm:ss.SSSSSSZ, e.g., 2022-11-28T05:41:43.620792Z. The updated_to cannot be earlier than the updated_from.",
											"disabled": true
										},
										{
											"key": "statuses",
											"value": "TASK_STATUS_START_PENDING",
											"description": "Optional. Used to filter Tasks with specifics status(es). An empty list implies no filtering (none) is desired.",
											"disabled": true
										},
										{
											"key": "statuses",
											"value": "TASK_STATUS_SENSOR_REQUIRED",
											"description": "Optional. Used to filter Tasks with specifics status(es). An empty list implies no filtering (none) is desired.",
											"disabled": true
										},
										{
											"key": "sensor_mac_address",
											"value": "<string>",
											"description": "Optional. Used to filter Tasks with specific associated sensors. An empty value implies no filtering is desired. <br> Example: 00074DDDA28C",
											"disabled": true
										},
										{
											"key": "sort_field",
											"value": "SORT_FIELD_NAME",
											"description": "Used to sort tasks by field. Default Sort Field enum is SORT_FIELD_NAME.",
											"disabled": true
										},
										{
											"key": "sort_order",
											"value": "SORT_ORDER_ASC",
											"description": "Used to sort tasks by the specified order direction. ASC is the default order.",
											"disabled": true
										}
									]
								},
								"description": "Retrieves Tasks"
							},
							"response": [
								{
									"name": "A successful response.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/environmental/tasks?page=<long>&size=<long>&text_filter=<string>&updated_from=<dateTime>&updated_to=<dateTime>&statuses=TASK_STATUS_SENSOR_REQUIRED&sensor_mac_address=<string>&sort_field=SORT_FIELD_NAME&sort_order=SORT_ORDER_ASC",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"environmental",
												"tasks"
											],
											"query": [
												{
													"key": "page",
													"value": "<long>",
													"description": "Page number, starting from 0."
												},
												{
													"key": "size",
													"value": "<long>",
													"description": "(Required) Number of elements per page. Greater than 0."
												},
												{
													"key": "text_filter",
													"value": "<string>",
													"description": "Used for searching for specific Tasks by name."
												},
												{
													"key": "updated_from",
													"value": "<dateTime>",
													"description": "Required when the updated_to is set. Used in conjunction with the updated_to to filter the tasks by the last updated date, in the format of YYYY-MM-DDTHH:mm:ss.SSSSSSZ, e.g., 2022-10-28T05:41:43.620792Z. The updated_from cannot be later than the updated_to."
												},
												{
													"key": "updated_to",
													"value": "<dateTime>",
													"description": "Required when the updated_from is set. Used in conjunction with the updated_from to filter the tasks by the last updated date, in the format of YYYY-MM-DDTHH:mm:ss.SSSSSSZ, e.g., 2022-11-28T05:41:43.620792Z. The updated_to cannot be earlier than the updated_from."
												},
												{
													"key": "statuses",
													"value": "TASK_STATUS_SENSOR_REQUIRED",
													"description": "Optional. Used to filter Tasks with specifics status(es). An empty list implies no filtering (none) is desired."
												},
												{
													"key": "sensor_mac_address",
													"value": "<string>",
													"description": "Optional. Used to filter Tasks with specific associated sensors. An empty value implies no filtering is desired. <br> Example: 00074DDDA28C"
												},
												{
													"key": "sort_field",
													"value": "SORT_FIELD_NAME",
													"description": "Used to sort tasks by field. Default Sort Field enum is SORT_FIELD_NAME."
												},
												{
													"key": "sort_order",
													"value": "SORT_ORDER_ASC",
													"description": "Used to sort tasks by the specified order direction. ASC is the default order."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"tasks\": [\n    {\n      \"id\": \"<string>\",\n      \"sensor_count\": \"<string>\",\n      \"status\": \"TASK_STATUS_ACTIVE\",\n      \"started\": \"<dateTime>\",\n      \"ended\": \"<dateTime>\",\n      \"taskDetails\": {\n        \"name\": \"<string>\",\n        \"created\": \"<dateTime>\",\n        \"updated\": \"<dateTime>\",\n        \"notes\": \"<string>\",\n        \"required_sensors\": \"<string>\"\n      },\n      \"alarm_count\": \"<string>\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"sensor_count\": \"<string>\",\n      \"status\": \"TASK_STATUS_ACTIVE\",\n      \"started\": \"<dateTime>\",\n      \"ended\": \"<dateTime>\",\n      \"taskDetails\": {\n        \"name\": \"<string>\",\n        \"created\": \"<dateTime>\",\n        \"updated\": \"<dateTime>\",\n        \"notes\": \"<string>\",\n        \"required_sensors\": \"<string>\"\n      },\n      \"alarm_count\": \"<string>\"\n    }\n  ],\n  \"page_response\": {\n    \"total_elements\": \"<string>\",\n    \"size\": \"<long>\",\n    \"total_pages\": \"<long>\",\n    \"page\": \"<long>\"\n  }\n}"
								},
								{
									"name": "An unexpected error response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/environmental/tasks?page=<long>&size=<long>&text_filter=<string>&updated_from=<dateTime>&updated_to=<dateTime>&statuses=TASK_STATUS_SENSOR_REQUIRED&sensor_mac_address=<string>&sort_field=SORT_FIELD_NAME&sort_order=SORT_ORDER_ASC",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"environmental",
												"tasks"
											],
											"query": [
												{
													"key": "page",
													"value": "<long>",
													"description": "Page number, starting from 0."
												},
												{
													"key": "size",
													"value": "<long>",
													"description": "(Required) Number of elements per page. Greater than 0."
												},
												{
													"key": "text_filter",
													"value": "<string>",
													"description": "Used for searching for specific Tasks by name."
												},
												{
													"key": "updated_from",
													"value": "<dateTime>",
													"description": "Required when the updated_to is set. Used in conjunction with the updated_to to filter the tasks by the last updated date, in the format of YYYY-MM-DDTHH:mm:ss.SSSSSSZ, e.g., 2022-10-28T05:41:43.620792Z. The updated_from cannot be later than the updated_to."
												},
												{
													"key": "updated_to",
													"value": "<dateTime>",
													"description": "Required when the updated_from is set. Used in conjunction with the updated_from to filter the tasks by the last updated date, in the format of YYYY-MM-DDTHH:mm:ss.SSSSSSZ, e.g., 2022-11-28T05:41:43.620792Z. The updated_to cannot be earlier than the updated_from."
												},
												{
													"key": "statuses",
													"value": "TASK_STATUS_SENSOR_REQUIRED",
													"description": "Optional. Used to filter Tasks with specifics status(es). An empty list implies no filtering (none) is desired."
												},
												{
													"key": "sensor_mac_address",
													"value": "<string>",
													"description": "Optional. Used to filter Tasks with specific associated sensors. An empty value implies no filtering is desired. <br> Example: 00074DDDA28C"
												},
												{
													"key": "sort_field",
													"value": "SORT_FIELD_NAME",
													"description": "Used to sort tasks by field. Default Sort Field enum is SORT_FIELD_NAME."
												},
												{
													"key": "sort_order",
													"value": "SORT_ORDER_ASC",
													"description": "Used to sort tasks by the specified order direction. ASC is the default order."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"details\": [\n    {\n      \"@type\": \"<string>\"\n    },\n    {\n      \"@type\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"name": "Authentication information is missing or invalid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/environmental/tasks?page=<long>&size=<long>&text_filter=<string>&updated_from=<dateTime>&updated_to=<dateTime>&statuses=TASK_STATUS_SENSOR_REQUIRED&sensor_mac_address=<string>&sort_field=SORT_FIELD_NAME&sort_order=SORT_ORDER_ASC",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"environmental",
												"tasks"
											],
											"query": [
												{
													"key": "page",
													"value": "<long>",
													"description": "Page number, starting from 0."
												},
												{
													"key": "size",
													"value": "<long>",
													"description": "(Required) Number of elements per page. Greater than 0."
												},
												{
													"key": "text_filter",
													"value": "<string>",
													"description": "Used for searching for specific Tasks by name."
												},
												{
													"key": "updated_from",
													"value": "<dateTime>",
													"description": "Required when the updated_to is set. Used in conjunction with the updated_to to filter the tasks by the last updated date, in the format of YYYY-MM-DDTHH:mm:ss.SSSSSSZ, e.g., 2022-10-28T05:41:43.620792Z. The updated_from cannot be later than the updated_to."
												},
												{
													"key": "updated_to",
													"value": "<dateTime>",
													"description": "Required when the updated_from is set. Used in conjunction with the updated_from to filter the tasks by the last updated date, in the format of YYYY-MM-DDTHH:mm:ss.SSSSSSZ, e.g., 2022-11-28T05:41:43.620792Z. The updated_to cannot be earlier than the updated_from."
												},
												{
													"key": "statuses",
													"value": "TASK_STATUS_SENSOR_REQUIRED",
													"description": "Optional. Used to filter Tasks with specifics status(es). An empty list implies no filtering (none) is desired."
												},
												{
													"key": "sensor_mac_address",
													"value": "<string>",
													"description": "Optional. Used to filter Tasks with specific associated sensors. An empty value implies no filtering is desired. <br> Example: 00074DDDA28C"
												},
												{
													"key": "sort_field",
													"value": "SORT_FIELD_NAME",
													"description": "Used to sort tasks by field. Default Sort Field enum is SORT_FIELD_NAME."
												},
												{
													"key": "sort_order",
													"value": "SORT_ORDER_ASC",
													"description": "Used to sort tasks by the specified order direction. ASC is the default order."
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "devices",
			"item": [
				{
					"name": "environmental-sensors",
					"item": [
						{
							"name": "Retrieves sensors associated with a tenant",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "apikey",
										"value": "{{apikey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/devices/environmental-sensors?page=0&size=10&sort_order=SORT_ORDER_ASC",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"devices",
										"environmental-sensors"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Page number, starting from 0"
										},
										{
											"key": "size",
											"value": "10",
											"description": "(Required) Page size, must be greater than 0"
										},
										{
											"key": "text_filter",
											"value": "DLJ230203866",
											"description": "Used to filter sensors by name, MAC address or serial number.",
											"disabled": true
										},
										{
											"key": "task_id",
											"value": "",
											"description": "ID of the Task. <br>Example:  '04a21952-cdcf-4bb2-bcaa-4e325f4b9a4a'.",
											"disabled": true
										},
										{
											"key": "sort_field",
											"value": "SORT_FIELD_NAME",
											"description": "Used to sort sensors by field",
											"disabled": true
										},
										{
											"key": "sort_order",
											"value": "SORT_ORDER_ASC",
											"description": "Used to sort sensors by the specified order direction"
										},
										{
											"key": "statuses",
											"value": "SENSOR_STATUS_ACTIVE",
											"description": "Used to filter sensors by the provided list of statuses",
											"disabled": true
										},
										{
											"key": "statuses",
											"value": "SENSOR_STATUS_ACTIVE",
											"description": "Used to filter sensors by the provided list of statuses",
											"disabled": true
										},
										{
											"key": "exclude_low_battery",
											"value": "false",
											"description": "Used to filter out sensors with low battery. Battery levels <= 5% are considered low battery.",
											"disabled": true
										},
										{
											"key": "sensor_task_statuses",
											"value": "SENSOR_TASK_STATUS_ACTIVE",
											"description": "Used to filter sensors by the provided list of sensor task statuses, when task_id is provided",
											"disabled": true
										},
										{
											"key": "sensor_task_statuses",
											"value": "SENSOR_TASK_STATUS_COMPLETED",
											"description": "Used to filter sensors by the provided list of sensor task statuses, when task_id is provided",
											"disabled": true
										},
										{
											"key": "enrolled_after",
											"value": "",
											"description": "Used to filter sensors that were enrolled after the specified time frame (YYYY-MM-DDTHH:mm:ss.SSSSSSZ). <br>Example: '2022-10-28T05:41:43.620792Z'.",
											"disabled": true
										},
										{
											"key": "enrolled_before",
											"value": "",
											"description": "Used to filter sensors that were enrolled before the specified time frame (YYYY-MM-DDTHH:mm:ss.SSSSSSZ). <br>Example: '2022-10-28T05:41:43.620792Z'.",
											"disabled": true
										}
									]
								},
								"description": "Retrieves sensors previously associated with a tenant"
							},
							"response": [
								{
									"name": "A successful response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/devices/environmental-sensors?page=0&size=<integer>&text_filter=<string>&task_id=<uuid>&sort_field=SORT_FIELD_NAME&sort_order=SORT_ORDER_ASC&statuses=SENSOR_STATUS_ACTIVE&exclude_low_battery=false&sensor_task_statuses=SENSOR_TASK_STATUS_COMPLETED&enrolled_after=<dateTime>&enrolled_before=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"devices",
												"environmental-sensors"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Page number, starting from 0"
												},
												{
													"key": "size",
													"value": "<integer>",
													"description": "(Required) Page size, must be greater than 0"
												},
												{
													"key": "text_filter",
													"value": "<string>",
													"description": "Used to filter sensors by name, MAC address or serial number."
												},
												{
													"key": "task_id",
													"value": "<uuid>",
													"description": "ID of the Task. <br>Example:  '04a21952-cdcf-4bb2-bcaa-4e325f4b9a4a'."
												},
												{
													"key": "sort_field",
													"value": "SORT_FIELD_NAME",
													"description": "Used to sort sensors by field"
												},
												{
													"key": "sort_order",
													"value": "SORT_ORDER_ASC",
													"description": "Used to sort sensors by the specified order direction"
												},
												{
													"key": "statuses",
													"value": "SENSOR_STATUS_ACTIVE",
													"description": "Used to filter sensors by the provided list of statuses"
												},
												{
													"key": "exclude_low_battery",
													"value": "false",
													"description": "Used to filter out sensors with low battery. Battery levels <= 5% are considered low battery."
												},
												{
													"key": "sensor_task_statuses",
													"value": "SENSOR_TASK_STATUS_COMPLETED",
													"description": "Used to filter sensors by the provided list of sensor task statuses, when task_id is provided"
												},
												{
													"key": "enrolled_after",
													"value": "<dateTime>",
													"description": "Used to filter sensors that were enrolled after the specified time frame (YYYY-MM-DDTHH:mm:ss.SSSSSSZ). <br>Example: '2022-10-28T05:41:43.620792Z'."
												},
												{
													"key": "enrolled_before",
													"value": "<dateTime>",
													"description": "Used to filter sensors that were enrolled before the specified time frame (YYYY-MM-DDTHH:mm:ss.SSSSSSZ). <br>Example: '2022-10-28T05:41:43.620792Z'."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"sensors\": [\n    {\n      \"id\": \"<uuid>\",\n      \"mac_address\": \"<string>\",\n      \"serial_number\": \"<string>\",\n      \"model\": \"<string>\",\n      \"manufacturer\": \"<string>\",\n      \"hardware_revision\": \"<string>\",\n      \"firmware_revision\": \"<string>\",\n      \"battery_level\": \"<integer>\",\n      \"additional_info\": \"<string>\",\n      \"name\": \"<string>\",\n      \"status\": \"SENSOR_STATUS_ACTIVE_WITH_ALARM\",\n      \"alarm_count\": \"<long>\",\n      \"first_seen\": \"<dateTime>\",\n      \"last_updated\": \"<dateTime>\",\n      \"notes\": \"<string>\",\n      \"certificate_url\": \"<string>\",\n      \"most_recent\": {\n        \"task_id\": \"<uuid>\",\n        \"sensor_task_id\": \"<uuid>\",\n        \"SensorTaskStatus\": \"SENSOR_TASK_STATUS_STOP_PENDING\"\n      },\n      \"requested\": {\n        \"task_id\": \"<uuid>\",\n        \"sensor_task_id\": \"<uuid>\",\n        \"SensorTaskStatus\": \"SENSOR_TASK_STATUS_STOP_PENDING\"\n      },\n      \"certificate_type\": \"CERTIFICATE_TYPE_CALIBRATION\",\n      \"unverified\": {\n        \"last_date_time\": \"<dateTime>\",\n        \"last_temperature\": \"<float>\",\n        \"last_alarm\": \"<boolean>\"\n      }\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"mac_address\": \"<string>\",\n      \"serial_number\": \"<string>\",\n      \"model\": \"<string>\",\n      \"manufacturer\": \"<string>\",\n      \"hardware_revision\": \"<string>\",\n      \"firmware_revision\": \"<string>\",\n      \"battery_level\": \"<integer>\",\n      \"additional_info\": \"<string>\",\n      \"name\": \"<string>\",\n      \"status\": \"SENSOR_STATUS_STOPPED\",\n      \"alarm_count\": \"<long>\",\n      \"first_seen\": \"<dateTime>\",\n      \"last_updated\": \"<dateTime>\",\n      \"notes\": \"<string>\",\n      \"certificate_url\": \"<string>\",\n      \"most_recent\": {\n        \"task_id\": \"<uuid>\",\n        \"sensor_task_id\": \"<uuid>\",\n        \"SensorTaskStatus\": \"SENSOR_TASK_STATUS_COMPLETED\"\n      },\n      \"requested\": {\n        \"task_id\": \"<uuid>\",\n        \"sensor_task_id\": \"<uuid>\",\n        \"SensorTaskStatus\": \"SENSOR_TASK_STATUS_ACTIVE_WITH_ALARM\"\n      },\n      \"certificate_type\": \"CERTIFICATE_TYPE_CONFORMANCE\",\n      \"unverified\": {\n        \"last_date_time\": \"<dateTime>\",\n        \"last_temperature\": \"<float>\",\n        \"last_alarm\": \"<boolean>\"\n      }\n    }\n  ],\n  \"page_response\": {\n    \"total_elements\": \"<integer>\",\n    \"size\": \"<integer>\",\n    \"total_pages\": \"<integer>\",\n    \"page\": \"<integer>\"\n  }\n}"
								},
								{
									"name": "An unexpected error response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/devices/environmental-sensors?page=0&size=<integer>&text_filter=<string>&task_id=<uuid>&sort_field=SORT_FIELD_NAME&sort_order=SORT_ORDER_ASC&statuses=SENSOR_STATUS_ACTIVE&exclude_low_battery=false&sensor_task_statuses=SENSOR_TASK_STATUS_COMPLETED&enrolled_after=<dateTime>&enrolled_before=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"devices",
												"environmental-sensors"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Page number, starting from 0"
												},
												{
													"key": "size",
													"value": "<integer>",
													"description": "(Required) Page size, must be greater than 0"
												},
												{
													"key": "text_filter",
													"value": "<string>",
													"description": "Used to filter sensors by name, MAC address or serial number."
												},
												{
													"key": "task_id",
													"value": "<uuid>",
													"description": "ID of the Task. <br>Example:  '04a21952-cdcf-4bb2-bcaa-4e325f4b9a4a'."
												},
												{
													"key": "sort_field",
													"value": "SORT_FIELD_NAME",
													"description": "Used to sort sensors by field"
												},
												{
													"key": "sort_order",
													"value": "SORT_ORDER_ASC",
													"description": "Used to sort sensors by the specified order direction"
												},
												{
													"key": "statuses",
													"value": "SENSOR_STATUS_ACTIVE",
													"description": "Used to filter sensors by the provided list of statuses"
												},
												{
													"key": "exclude_low_battery",
													"value": "false",
													"description": "Used to filter out sensors with low battery. Battery levels <= 5% are considered low battery."
												},
												{
													"key": "sensor_task_statuses",
													"value": "SENSOR_TASK_STATUS_COMPLETED",
													"description": "Used to filter sensors by the provided list of sensor task statuses, when task_id is provided"
												},
												{
													"key": "enrolled_after",
													"value": "<dateTime>",
													"description": "Used to filter sensors that were enrolled after the specified time frame (YYYY-MM-DDTHH:mm:ss.SSSSSSZ). <br>Example: '2022-10-28T05:41:43.620792Z'."
												},
												{
													"key": "enrolled_before",
													"value": "<dateTime>",
													"description": "Used to filter sensors that were enrolled before the specified time frame (YYYY-MM-DDTHH:mm:ss.SSSSSSZ). <br>Example: '2022-10-28T05:41:43.620792Z'."
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Authentication information is missing or invalid.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/devices/environmental-sensors?page=0&size=<integer>&text_filter=<string>&task_id=<uuid>&sort_field=SORT_FIELD_NAME&sort_order=SORT_ORDER_ASC&statuses=SENSOR_STATUS_ACTIVE&exclude_low_battery=false&sensor_task_statuses=SENSOR_TASK_STATUS_COMPLETED&enrolled_after=<dateTime>&enrolled_before=<dateTime>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"devices",
												"environmental-sensors"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Page number, starting from 0"
												},
												{
													"key": "size",
													"value": "<integer>",
													"description": "(Required) Page size, must be greater than 0"
												},
												{
													"key": "text_filter",
													"value": "<string>",
													"description": "Used to filter sensors by name, MAC address or serial number."
												},
												{
													"key": "task_id",
													"value": "<uuid>",
													"description": "ID of the Task. <br>Example:  '04a21952-cdcf-4bb2-bcaa-4e325f4b9a4a'."
												},
												{
													"key": "sort_field",
													"value": "SORT_FIELD_NAME",
													"description": "Used to sort sensors by field"
												},
												{
													"key": "sort_order",
													"value": "SORT_ORDER_ASC",
													"description": "Used to sort sensors by the specified order direction"
												},
												{
													"key": "statuses",
													"value": "SENSOR_STATUS_ACTIVE",
													"description": "Used to filter sensors by the provided list of statuses"
												},
												{
													"key": "exclude_low_battery",
													"value": "false",
													"description": "Used to filter out sensors with low battery. Battery levels <= 5% are considered low battery."
												},
												{
													"key": "sensor_task_statuses",
													"value": "SENSOR_TASK_STATUS_COMPLETED",
													"description": "Used to filter sensors by the provided list of sensor task statuses, when task_id is provided"
												},
												{
													"key": "enrolled_after",
													"value": "<dateTime>",
													"description": "Used to filter sensors that were enrolled after the specified time frame (YYYY-MM-DDTHH:mm:ss.SSSSSSZ). <br>Example: '2022-10-28T05:41:43.620792Z'."
												},
												{
													"key": "enrolled_before",
													"value": "<dateTime>",
													"description": "Used to filter sensors that were enrolled before the specified time frame (YYYY-MM-DDTHH:mm:ss.SSSSSSZ). <br>Example: '2022-10-28T05:41:43.620792Z'."
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Sensor DLJ230203859",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "apikey",
												"value": "{{apikey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/devices/environmental-sensors?page=0&size=1&sort_order=SORT_ORDER_ASC",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"devices",
												"environmental-sensors"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Page number, starting from 0"
												},
												{
													"key": "size",
													"value": "1",
													"description": "(Required) Page size, must be greater than 0"
												},
												{
													"key": "text_filter",
													"value": "DLJ230203860",
													"description": "Used to filter sensors by name, MAC address or serial number.",
													"disabled": true
												},
												{
													"key": "task_id",
													"value": "",
													"description": "ID of the Task. <br>Example:  '04a21952-cdcf-4bb2-bcaa-4e325f4b9a4a'.",
													"disabled": true
												},
												{
													"key": "sort_field",
													"value": "SORT_FIELD_NAME",
													"description": "Used to sort sensors by field",
													"disabled": true
												},
												{
													"key": "sort_order",
													"value": "SORT_ORDER_ASC",
													"description": "Used to sort sensors by the specified order direction"
												},
												{
													"key": "statuses",
													"value": "SENSOR_STATUS_ACTIVE",
													"description": "Used to filter sensors by the provided list of statuses",
													"disabled": true
												},
												{
													"key": "statuses",
													"value": "SENSOR_STATUS_ACTIVE",
													"description": "Used to filter sensors by the provided list of statuses",
													"disabled": true
												},
												{
													"key": "exclude_low_battery",
													"value": "false",
													"description": "Used to filter out sensors with low battery. Battery levels <= 5% are considered low battery.",
													"disabled": true
												},
												{
													"key": "sensor_task_statuses",
													"value": "SENSOR_TASK_STATUS_ACTIVE",
													"description": "Used to filter sensors by the provided list of sensor task statuses, when task_id is provided",
													"disabled": true
												},
												{
													"key": "sensor_task_statuses",
													"value": "SENSOR_TASK_STATUS_COMPLETED",
													"description": "Used to filter sensors by the provided list of sensor task statuses, when task_id is provided",
													"disabled": true
												},
												{
													"key": "enrolled_after",
													"value": "",
													"description": "Used to filter sensors that were enrolled after the specified time frame (YYYY-MM-DDTHH:mm:ss.SSSSSSZ). <br>Example: '2022-10-28T05:41:43.620792Z'.",
													"disabled": true
												},
												{
													"key": "enrolled_before",
													"value": "",
													"description": "Used to filter sensors that were enrolled before the specified time frame (YYYY-MM-DDTHH:mm:ss.SSSSSSZ). <br>Example: '2022-10-28T05:41:43.620792Z'.",
													"disabled": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 20 Sep 2024 16:45:07 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										},
										{
											"key": "Content-Length",
											"value": "1079"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "grpc-metadata-content-type",
											"value": "application/grpc"
										},
										{
											"key": "grpc-metadata-grpc-accept-encoding",
											"value": "gzip"
										},
										{
											"key": "grpc-metadata-x-zebra-envirovue-workspace",
											"value": "11083e96-8728-49c9-81c9-291570d9c8f7"
										},
										{
											"key": "request-id",
											"value": "crmqd4qfbkrc73cr31n0"
										},
										{
											"key": "x-envoy-upstream-service-time",
											"value": "29"
										},
										{
											"key": "Server",
											"value": "envoy"
										},
										{
											"key": "strict-transport-security",
											"value": "max-age=15768000"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Headers",
											"value": "Origin, X-Requested-With, Accept, apikey, Content-Type, Cache-Control"
										},
										{
											"key": "Access-Control-Max-Age",
											"value": "3628800"
										},
										{
											"key": "Access-Control-Allow-Methods",
											"value": "GET, PATCH, POST, DELETE"
										}
									],
									"cookie": [],
									"body": "{\n    \"sensors\": [\n        {\n            \"id\": \"563ac292-9574-48b7-b29b-1d94472a59e1\",\n            \"mac_address\": \"00074DF30F55\",\n            \"serial_number\": \"DLJ230203859\",\n            \"model\": \"ZS300\",\n            \"manufacturer\": \"Zebra Technologies\",\n            \"hardware_revision\": \"2\",\n            \"firmware_revision\": \"D01.0.1.779\",\n            \"battery_level\": 97,\n            \"name\": \"ZS300_DLJ230203859\",\n            \"status\": \"SENSOR_STATUS_STOPPED\",\n            \"alarm_count\": null,\n            \"first_seen\": \"2024-09-20T16:43:21.761089Z\",\n            \"last_updated\": \"2024-09-20T16:45:05.435648Z\",\n            \"notes\": \"\",\n            \"certificate_url\": \"https://storage.googleapis.com/spg-zpc-p-envirovue-certs/certificates/ZS300_Sensor_Certificate_of_Conformance_RevB.pdf\",\n            \"most_recent\": {\n                \"task_id\": \"\",\n                \"sensor_task_id\": \"\",\n                \"sensor_task_status\": \"SENSOR_TASK_STATUS_UNSPECIFIED\",\n                \"alarm_count\": null,\n                \"last_read_time\": null\n            },\n            \"requested\": {\n                \"task_id\": \"\",\n                \"sensor_task_id\": \"\",\n                \"sensor_task_status\": \"SENSOR_TASK_STATUS_UNSPECIFIED\",\n                \"alarm_count\": null,\n                \"last_read_time\": null\n            },\n            \"certificate_type\": \"CERTIFICATE_TYPE_CONFORMANCE\",\n            \"unverified\": {\n                \"last_date_time\": \"2024-09-20T16:45:05.634377Z\",\n                \"last_temperature\": 27.54,\n                \"last_alarm\": false\n            }\n        }\n    ],\n    \"page_response\": {\n        \"total_elements\": 2,\n        \"size\": 1,\n        \"total_pages\": 2,\n        \"page\": 0\n    }\n}"
								}
							]
						},
						{
							"name": "API now",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "apikey",
										"value": "{{apikey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/devices/environmental-sensors/8c0a3b42-6fef-4331-87c7-df64e0124fc6/readings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"devices",
										"environmental-sensors",
										"8c0a3b42-6fef-4331-87c7-df64e0124fc6",
										"readings"
									],
									"query": [
										{
											"key": "task_id",
											"value": "",
											"description": "ID of the Task. <br>Example:  '04a21952-cdcf-4bb2-bcaa-4e325f4b9a4a'.",
											"disabled": true
										},
										{
											"key": "sort_field",
											"value": "SORT_FIELD_NAME",
											"description": "Used to sort sensors by field",
											"disabled": true
										},
										{
											"key": "statuses",
											"value": "SENSOR_STATUS_ACTIVE",
											"description": "Used to filter sensors by the provided list of statuses",
											"disabled": true
										},
										{
											"key": "statuses",
											"value": "SENSOR_STATUS_ACTIVE",
											"description": "Used to filter sensors by the provided list of statuses",
											"disabled": true
										},
										{
											"key": "exclude_low_battery",
											"value": "false",
											"description": "Used to filter out sensors with low battery. Battery levels <= 5% are considered low battery.",
											"disabled": true
										},
										{
											"key": "sensor_task_statuses",
											"value": "SENSOR_TASK_STATUS_ACTIVE",
											"description": "Used to filter sensors by the provided list of sensor task statuses, when task_id is provided",
											"disabled": true
										},
										{
											"key": "sensor_task_statuses",
											"value": "SENSOR_TASK_STATUS_COMPLETED",
											"description": "Used to filter sensors by the provided list of sensor task statuses, when task_id is provided",
											"disabled": true
										},
										{
											"key": "enrolled_after",
											"value": "",
											"description": "Used to filter sensors that were enrolled after the specified time frame (YYYY-MM-DDTHH:mm:ss.SSSSSSZ). <br>Example: '2022-10-28T05:41:43.620792Z'.",
											"disabled": true
										},
										{
											"key": "enrolled_before",
											"value": "",
											"description": "Used to filter sensors that were enrolled before the specified time frame (YYYY-MM-DDTHH:mm:ss.SSSSSSZ). <br>Example: '2022-10-28T05:41:43.620792Z'.",
											"disabled": true
										}
									]
								},
								"description": "Retrieves sensors previously associated with a tenant"
							},
							"response": []
						}
					]
				},
				{
					"name": "sensor-enrollments",
					"item": [
						{
							"name": "{serialNumber}",
							"item": [
								{
									"name": "Requests unenrollment for a sensor",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "apikey",
												"value": "{{apikey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/devices/sensor-enrollments/:serialNumber",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"devices",
												"sensor-enrollments",
												":serialNumber"
											],
											"variable": [
												{
													"key": "serialNumber",
													"value": "DLEJ230203863",
													"description": "(Required) The Serial Number of the sensor which you want to unenroll"
												}
											]
										},
										"description": "Requests sensor unenrollment by the sensor serial number provided. Currently, unenrollments are only supported by the ZB200 Bridge. In the future, the ZSFinder Android service will also support them."
									},
									"response": [
										{
											"name": "A successful response.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/devices/sensor-enrollments/:serialNumber",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"devices",
														"sensor-enrollments",
														":serialNumber"
													],
													"variable": [
														{
															"key": "serialNumber"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Unable to unenroll a sensor due to a failed pre condition.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/devices/sensor-enrollments/:serialNumber",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"devices",
														"sensor-enrollments",
														":serialNumber"
													],
													"variable": [
														{
															"key": "serialNumber"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Authentication information is missing or invalid.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/devices/sensor-enrollments/:serialNumber",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"devices",
														"sensor-enrollments",
														":serialNumber"
													],
													"variable": [
														{
															"key": "serialNumber"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Suitable sensor to unenroll not found.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/devices/sensor-enrollments/:serialNumber",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"devices",
														"sensor-enrollments",
														":serialNumber"
													],
													"variable": [
														{
															"key": "serialNumber"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Unenrollment request already exists or started.",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/devices/sensor-enrollments/:serialNumber",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"devices",
														"sensor-enrollments",
														":serialNumber"
													],
													"variable": [
														{
															"key": "serialNumber"
														}
													]
												}
											},
											"status": "Conflict",
											"code": 409,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								}
							]
						},
						{
							"name": "Requests enrollment for a sensor",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "apikey",
										"value": "{{apikey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"serial_number\": \"DLJ230203866\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/devices/sensor-enrollments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"devices",
										"sensor-enrollments"
									]
								},
								"description": "Requests sensor enrollment by the sensor serial number provided"
							},
							"response": [
								{
									"name": "A successful response.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"serial_number\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/devices/sensor-enrollments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"devices",
												"sensor-enrollments"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "An unexpected error response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"serial_number\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/devices/sensor-enrollments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"devices",
												"sensor-enrollments"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Authentication information is missing or invalid.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"serial_number\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/devices/sensor-enrollments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"devices",
												"sensor-enrollments"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Unable to request a sensor enrollment",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"serial_number\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/devices/sensor-enrollments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"devices",
												"sensor-enrollments"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "tasks",
			"item": [
				{
					"name": "{taskId}",
					"item": [
						{
							"name": "log",
							"item": [
								{
									"name": "Retrieve sensor read events by task",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "apikey",
												"value": "{{apikey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/data/environmental/tasks/:taskId/log?limit=500",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"data",
												"environmental",
												"tasks",
												":taskId",
												"log"
											],
											"query": [
												{
													"key": "startTime",
													"value": "<string>",
													"description": "Date-time timestamp of records newer than the time provided in Zulu format.",
													"disabled": true
												},
												{
													"key": "endTime",
													"value": "<string>",
													"description": "Date-time timestamp of records not occurring before the time provided in Zulu format. Maximum range must not be more then 30 days.",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "500",
													"description": "Maximum number of records to return. Default is 500. Use the cursor to get additional pages of records. Must be an integer between 1 and 14000 inclusive."
												},
												{
													"key": "cursor",
													"value": "1000",
													"description": "Enter the 'nextCursor' from the previous page.  A guid index for the next page of events based on the previous limit.",
													"disabled": true
												},
												{
													"key": "sensorTaskId",
													"value": "a3958afb-2b09-4ead-a40d-242c8097af96",
													"description": "Provide the `sensorTaskId` to filter your results by sensor.",
													"disabled": true
												},
												{
													"key": "deviceId",
													"value": "<string>",
													"description": "Filter task data within event data by a reader `deviceId`.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "taskId",
													"value": "9c43e4f8-c5a6-44ef-9517-9505bb18e7a5",
													"description": "(Required) The ID number of the task."
												}
											]
										},
										"description": "Retrieves temperature records, alarms, upload times, and locations based on the `taskId` you provide. You can limit the events retrieved by a time period you dictate. By default will return the most recent 500 log entries from the last month in descending timestamp order"
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/tasks/:taskId/log?startTime=<string>&endTime=<string>&limit=<integer>&cursor=<string>&sensorTaskId=<string>&deviceId=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"tasks",
														":taskId",
														"log"
													],
													"query": [
														{
															"key": "startTime",
															"value": "<string>",
															"description": "Date-time timestamp of records newer than the time provided in Zulu format."
														},
														{
															"key": "endTime",
															"value": "<string>",
															"description": "Date-time timestamp of records not occurring before the time provided in Zulu format. Maximum range must not be more then 30 days."
														},
														{
															"key": "limit",
															"value": "<integer>",
															"description": "Maximum number of records to return. Default is 500. Use the cursor to get additional pages of records. Must be an integer between 1 and 14000 inclusive."
														},
														{
															"key": "cursor",
															"value": "<string>",
															"description": "Enter the 'nextCursor' from the previous page.  A guid index for the next page of events based on the previous limit."
														},
														{
															"key": "sensorTaskId",
															"value": "<string>",
															"description": "Provide the `sensorTaskId` to filter your results by sensor."
														},
														{
															"key": "deviceId",
															"value": "<string>",
															"description": "Filter task data within event data by a reader `deviceId`."
														}
													],
													"variable": [
														{
															"key": "taskId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"nextCursor\": \"<string>\",\n  \"results\": [\n    {\n      \"event\": {\n        \"timestamp\": \"<number>\",\n        \"deviceId\": \"<string>\",\n        \"data\": {\n          \"format\": \"epc\",\n          \"id\": \"<string>\",\n          \"value\": \"<string>\",\n          \"rssi\": \"<number>\"\n        },\n        \"id\": \"<uuid>\",\n        \"analytics\": {\n          \"recordedTimestamp\": \"<number>\",\n          \"resourceId\": \"<string>\",\n          \"tenant\": \"<string>\",\n          \"timestamp\": \"<number>\",\n          \"meta\": {\n            \"data\": {\n              \"taskId\": \"<string>\",\n              \"task_alarm\": \"<boolean>\",\n              \"notes\": \"<string>\"\n            }\n          },\n          \"enrichment\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"coordinates\": {\n            \"global\": {\n              \"lat\": \"<number>\",\n              \"lng\": \"<number>\"\n            }\n          },\n          \"asset\": \"<string>\"\n        },\n        \"decode\": {\n          \"temperature\": {\n            \"alert\": \"<boolean>\",\n            \"deviation\": \"<number>\",\n            \"format\": \"<string>\",\n            \"taskId\": \"<string>\",\n            \"sample\": \"<number>\"\n          }\n        }\n      }\n    },\n    {\n      \"event\": {\n        \"timestamp\": \"<number>\",\n        \"deviceId\": \"<string>\",\n        \"data\": {\n          \"format\": \"iso\",\n          \"id\": \"<string>\",\n          \"value\": \"<string>\",\n          \"rssi\": \"<number>\"\n        },\n        \"id\": \"<uuid>\",\n        \"analytics\": {\n          \"recordedTimestamp\": \"<number>\",\n          \"resourceId\": \"<string>\",\n          \"tenant\": \"<string>\",\n          \"timestamp\": \"<number>\",\n          \"meta\": {\n            \"data\": {\n              \"taskId\": \"<string>\",\n              \"task_alarm\": \"<boolean>\",\n              \"notes\": \"<string>\"\n            }\n          },\n          \"enrichment\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"coordinates\": {\n            \"global\": {\n              \"lat\": \"<number>\",\n              \"lng\": \"<number>\"\n            }\n          },\n          \"asset\": \"<string>\"\n        },\n        \"decode\": {\n          \"temperature\": {\n            \"alert\": \"<boolean>\",\n            \"deviation\": \"<number>\",\n            \"format\": \"<string>\",\n            \"taskId\": \"<string>\",\n            \"sample\": \"<number>\"\n          }\n        }\n      }\n    }\n  ]\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/tasks/:taskId/log?startTime=<string>&endTime=<string>&limit=<integer>&cursor=<string>&sensorTaskId=<string>&deviceId=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"tasks",
														":taskId",
														"log"
													],
													"query": [
														{
															"key": "startTime",
															"value": "<string>",
															"description": "Date-time timestamp of records newer than the time provided in Zulu format."
														},
														{
															"key": "endTime",
															"value": "<string>",
															"description": "Date-time timestamp of records not occurring before the time provided in Zulu format. Maximum range must not be more then 30 days."
														},
														{
															"key": "limit",
															"value": "<integer>",
															"description": "Maximum number of records to return. Default is 500. Use the cursor to get additional pages of records. Must be an integer between 1 and 14000 inclusive."
														},
														{
															"key": "cursor",
															"value": "<string>",
															"description": "Enter the 'nextCursor' from the previous page.  A guid index for the next page of events based on the previous limit."
														},
														{
															"key": "sensorTaskId",
															"value": "<string>",
															"description": "Provide the `sensorTaskId` to filter your results by sensor."
														},
														{
															"key": "deviceId",
															"value": "<string>",
															"description": "Filter task data within event data by a reader `deviceId`."
														}
													],
													"variable": [
														{
															"key": "taskId"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"info\": \"<string>\"\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer <token>",
														"description": "Added as a part of security scheme: bearer"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/tasks/:taskId/log?startTime=<string>&endTime=<string>&limit=<integer>&cursor=<string>&sensorTaskId=<string>&deviceId=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"tasks",
														":taskId",
														"log"
													],
													"query": [
														{
															"key": "startTime",
															"value": "<string>",
															"description": "Date-time timestamp of records newer than the time provided in Zulu format."
														},
														{
															"key": "endTime",
															"value": "<string>",
															"description": "Date-time timestamp of records not occurring before the time provided in Zulu format. Maximum range must not be more then 30 days."
														},
														{
															"key": "limit",
															"value": "<integer>",
															"description": "Maximum number of records to return. Default is 500. Use the cursor to get additional pages of records. Must be an integer between 1 and 14000 inclusive."
														},
														{
															"key": "cursor",
															"value": "<string>",
															"description": "Enter the 'nextCursor' from the previous page.  A guid index for the next page of events based on the previous limit."
														},
														{
															"key": "sensorTaskId",
															"value": "<string>",
															"description": "Provide the `sensorTaskId` to filter your results by sensor."
														},
														{
															"key": "deviceId",
															"value": "<string>",
															"description": "Filter task data within event data by a reader `deviceId`."
														}
													],
													"variable": [
														{
															"key": "taskId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"info\": \"<string>\"\n}"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "New Request",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "apikey",
						"value": "{{apikey}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}",
					"host": [
						"{{baseUrl}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Webhook N8N",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"test\": \"test\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://universe.sempitecno.com/webhook/6affd9b3-61da-4ef1-a7ff-bce4e594d9c6",
					"protocol": "https",
					"host": [
						"universe",
						"sempitecno",
						"com"
					],
					"path": [
						"webhook",
						"6affd9b3-61da-4ef1-a7ff-bce4e594d9c6"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api.zebra.com/v2",
			"type": "string"
		},
		{
			"key": "apikey",
			"value": "JAKSDFALDFLADSFKALDSF",
			"type": "string"
		}
	]
}